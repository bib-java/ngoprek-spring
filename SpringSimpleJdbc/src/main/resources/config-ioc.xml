<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<!-- dengan ini maka inisialisa class ProductDao untuk dataSource tidak 
		perlu di lakukan cukup tambahan annotation @Repository di nama class dan 
		@AutoWired di nama property dataSource -->
	<context:component-scan
		base-package="de.bib.spring.simple.jdbc.dao" />

	<!-- Configurai ke external properties -->
	<context:property-placeholder
		location="classpath:jdbc.properties" />

	<bean id="product" class="de.bib.spring.simple.jdbc.model.Product">
		<property name="kodeProduct" value="0005" />
		<property name="nameProduct" value="Mainan" />
		<property name="descProduct" value="" />
		<property name="unitProduct" value="pcs" />
	</bean>


	<bean id="dS"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"
			value="com.mysql.cj.jdbc.Driver" />
		<property name="url" value="${database.url}" />
		<property name="username" value="${database.username}" />
		<property name="password" value="${database.password}" />
	</bean>

	<!-- <bean id="productDao" class="de.bib.spring.simple.jdbc.dao.ProductDao"> -->
	<!-- Dependency Injection By Constructor -->
	<!-- <constructor-arg ref="dS" /> -->

	<!-- Dependency Injection by Method Setter, -->
	<!-- <property name="dataSource" ref="dS" /> -->
	<!-- </bean> -->
</beans>